
                HTTP Request Methods

    Request methods, also known as verbs, are used to indicate
    the desired action to be performed

    - GET - is a request for a resource (html file, javascript file, image, etc)
        GET - is used when you visit a website
    - HEAD - is like GET, but only asks for meta information without the body
    - POST - is used to post data to the server.
        Typical use case for POST is to post form data to the server
        (like a checkout form)
    - PUT - is a request for the enclosed entity be stored at the supplied URI.
        If the entity exists, it is expected to be updated.
            - POST is a create request
            - PUT is a create OR update request
    - DELETE - is a request to delete the specified resource
    - TRACE - will echo the received request. Can be used to see
            if request was altered by intermediate servers
    - OPTIONS - Returns the HTTP methods supported by the server for the specified URL
    - CONNECT - Converts the request to a transparent TCP/IP tunnel,
                typically for HTTPS through a unencrypted HTTP proxy
    - PATCH - Applies partial modifications to the specified resource

                Safe Methods

    - Safe Methods are considered safe to use because they only fetch information
        and do not cause changes on the server
    - The Safe Methods are: GET, HEAD, OPTIONS, and TRACE

                Idempotent Methods

    - Idempotence - A quality of an action such that repetitions of the action
                    have no further effect on the outcome
    - PUT and DELETE are Idempotent Methods
    - Safe Methods (GET, HEAD, TRACE, OPTIONS) are also Idempotent
    - Being truly Idempotent is not enforced by the protocol

                Non-Idempotent Methods

    - POST is NOT Idempotent
    - Multiple Posts are likely to create multiple resources
    - Ever seen websites asking you to click submit only once?

    Method      Request     Response    Safe    Idempotent      Cachable
                Body        Body
    ---------------------------------------------------------------------
    GET         NO          YES         YES         YES           YES

    HEAD        NO          NO          YES         YES           YES

    POST        YES         YES          NO          NO           YES

    PUT         YES         YES          NO         YES           NO

    DELETE      NO          YES          NO         YES           NO

    CONNECT     YES         YES          NO          NO           NO

    OPTIONS   OPTIONAL      YES         YES         YES           NO

    TRACE       NO          YES         YES         YES           NO

    PATCH       YES         YES          NO          NO           YES

                HTTP Status Codes

    - 100   series are informational in nature
    - 200   series indicate successful request
    - 300   series are redirections
    - 400   series are client errors
    - 500   series are server side errors

                Common HTTP Status Codes

    - 200 Okay; 201 Created; 204 Accepted
    - 301 Moved Permanently
    - 400 Bad Request; 401 Not Authorized; 404 Not Found
    - 500 Internal Server Error; 503 Service Unavailable

                HTTP 5XX Server Error

    HTTP 500 - Internal Server Error
        Generally, ant unhandled exception
        Other 500 errors are generally not used with Spring MVC

                HTTP 4XX Client Reeror

    HTTP 4XX Client Errors - Generally Checked Exceptions

    - 400 Bad Request - Cannot process due to client error
    - 401 Unauthorized - Authentication required
    - 404 Not Found - Resource Not Found
    - 405 Method Not Allowed - HTTP method not allowed
    - 409 Conflict - Possible with simultaneous updates
    - 417 Expectation Failed - Sometimes used with RESTful interfaces
    - 418 I'm a Teapot - April Fools Joke from IETF (Internet Engineering Task Force)

    *************************************************************************************

                @ResponseStatus

    - Allows you to annotate custom exception classes to indicate the framework the HTTP status
        you want returned when that exception is thrown.
    - Global to the application

                @ExceptionHandler

    - @ExceptionHandler works at the controller level
    - Allows you to define custom exception handling
        - Can be used with @ResponseStatus for just returning a HTTP status
        - Can be used to return a specific view
        - Also can take total control and work with the Model and View
            - "Model" cannot be a parameter of an ExceptionHandler method

                HandlerExceptionResolver

    - HandlerExceptionResolver is an interface you can implement for custom exception handling
    - Used Internally by Spring MVC
    - Note Model is not passed

        public interface HandlerExceptionResolver {
            @Nullable
            ModelAndView resolveException(
                    HttpServletRequest request, HttpServletResponse response,
                    @Nullable Object handler, Exception e);
        }

                Internal Spring MVC Exception Handlers

    - Spring MVC has 3 implementations of HandlerExceptionResolver
    - ExceptionHandlerExceptionResolver - Matches uncaught exceptions to @ExceptionHandler
    - ResponseStatusExceptionResolver - Looks for uncaught exceptions matching @ResponseStatus
    - DefaultHandlerExceptionResolver - Converts standard Spring Exceptions to HTTP status codes
        (Internal to Spring MVC)

                Custom HandlerExceptionResolver

    - You can provide your own implementations of HandlerExceptionResolver
    - Typically implemented with Spring's Ordered interface to define order the handlers will run in
    - Custom implementations are uncommon due to Spring robust exception handling

                SimpleMappingExceptionResolver

    - A Spring Bean you can define to map exceptions to specific views
    - You only define the exception class name (no package) and the view name
    - You cam optionally define a default error page

                Which to Use When?

    - If just setting the HTTP status - use @ResponseStatus
    - If redirection to a view - use SimpleMappingExceptionResolver
    - If both - consider @ExceptionHandler on the controller


                Internationalization

    - Often abbreviated as i18n (I18N) ( i + 18 characters + n )
    - Localization - l10n (L10N)
    - Fairly broad topic
        - Languages, Currencies, Layouts

                i18n with Spring MVC

    - i18n in a Spring MVC context generally is looking at support for languages
    - Driven by 'accept-language' request header
    - 'en-US' - 'en' is the language code, 'US' is the country code

                i18n Standards

    - Language identifiers were established by RFC 3066 in 2001
    - Language Codes are governed by ISO 639
    - Region codes are governed by ISO 3166
        (can refer to countries, regions, territories, etc.)

                Locale Detection

    - Default behavior is to use Accept-Language header
    - Can be configured to use system, a cookie, or a custom parameter.
        (Custom Parameter is useful to allow user to select language)

                Locale Resolvers

    - AcceptHeaderLocaleResolver is the Spring Boot Default
    - Optionally, can use FixedLocaleResolver (uses the locale of the JVM)
    - Available: CookieLocaleResolver, SessionLocaleResolver

                Changing Locale

    - Browsers are typically tied to the Locale of the operating system
    - Locale changing browser plugins are available
    - Spring MVC provides as LocaleChangeInterceptor to allow you to configure
        a custom parameter to use to change the locale.

                Resource Bundles

    - Resource bundles (aka messages.properties) are selected on highest match order.
    - First selected will be on language region
        ie en-US would match  messages_en_US.properties
    - If no exact match is found, just the language code is used.
        - en-GB would match messages_en_GB.properties
        - OR if no file found, would match messages_en.properties
        - Finally would match messages.properties
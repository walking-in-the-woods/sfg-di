
    First, make a jars of your app in target directory (clean package).
    There are two jars after packaging:

        1.  spring-boot-web-0.0.1-SNAPSHOT.jar  // fat jar that contains all needed dependencies and is executable
        2.  spring-boot-web-0.0.1-SNAPSHOT.jar.original // jar that contains your classes only and requires dependencies

    For a single application we are going to use the fat jar

    Then make a docker file (place the file and the fat jar into a temporary directory):

    **********************************************************************************

    FROM centos

    RUN yum install -y java-11-openjdk

    VOLUME /tmp
    ADD /spring-boot-web-0.0.1-SNAPSHOT.jar myapp.jar
    RUN sh -c 'touch /myapp.jar'
    ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/myapp.jar"]

    **********************************************************************************

    vi Dockerfile

    1.  FROM centos     // the OS we are working with
    2.  RUN yum install -y java     // install java to the OS. -y means "yes" confirmations to the installation requests
    3.  VOLUME /tmp     // this is where Spring Boot will store temp files for us
    4.  ADD /spring-boot-web-0.0.1SNAPSHOT.jar myapp.jar    // add from the current directory as "myapp.jar"
    5.  RUN sh -c 'touch /myapp.jar'    // "sh" - shell command, "touch" updates the date on the jar file
            and this could be important if we had static resources, such as images or things like that.
            So, that'll change the date for those, so if they get cached or something, the new version will
            get pulled down.
    6.  ENTRYPOINT  // an entrypoint is a command that the Docker image is going to run when it's run inside
            of a container. This is a run Java with a parameter "-Djava.security.egd=file:/dev/./urandom"
            this gives us a "urandom" value, and this helps Tomcat start up faster. "-jar" and "/myapp.jar"
            parameters are used to run the myapp.jar (the jar artifact)

    :q  -   to quit vi

    :q to quit (short for :quit)
    :q! to quit without saving (short for :quit!)
    :wq to write and quit
    :wq! to write and quit even if file has only read permission (if file does not have write permission: force write)
    :x to write and quit (similar to :wq, but only write if there are changes)
    :exit to write and exit (same as :x)
    :qa to quit all (short for :quitall)
    :cq to quit without saving and make Vim return non-zero error (i.e. exit with error)

    docker build -t spring-boot-docker .    // -t - is for a tag, so we tag this image with spring-boot-docker
                                            // the next important thing is ".", it says "look in the local directory
                                            // for this, for our Docker file, and it defaults to the name Dockerfile"

    docker run -d -p 8080:8080 spring-boot-docker   // run the built container on 8080 port

    docker ps   // check the container is running (then check it in a browser at localhost:8080)

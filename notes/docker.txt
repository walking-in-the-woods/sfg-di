
                What is Docker?

    - Docker is a standard for Linux containers.
    - A "Container" is an isolated runtime inside of Linux
    - A "Container" provides a private machine like space under Linux
    - Containers will run under any modern Linux Kernel

                Containers can:

    - Have their own process space
    - Their own network interface
    - "Run" processes as root (inside the container)
    - Have their own disk space
    - (can share with host too)

                A Container is not a VM!

            Virtual Machine                                 Containers

        App1        App2        App3
    Bins/Libs   Bins/Libs   Bins/Libs               App1        App2        App3
    Guest OS    Guest OS    Guest OS              Bins/Libs   Bins/Libs   Bins/Libs
    ---------- Hypervisor -----------             --------- Docker Engine ---------
    ----- Host Operating System -----             -------- Operating System -------
    --------- Infrastructure --------             --------- Infrastructure --------

    The main difference that containers have no guest operating systems.

                Docker Terminology

    - Docker Image - The representation of a Docker Container. Kind of like a JAR or WAR file in Java
    - Docker Container - The standard runtime of Docker. Effectively a deployed and running Docker Image.
                         Like a Spring Boot Executable JAR
    - Docker Engine - The code which manages Docker stuff. Creates and runs Docker Containers

                Docker Engine Runtime

    network     container       image       data volumes
       |____________|_____________|______________|
                           |
                    Client docker CLI
                           |
                        REST API
                           |
                  server docker daemon


                Docker Editions

    Docker Enterprise Edition vs Docker Community Edition

                Docker Enterprise Edition

    - CaaS (Container as a Service) platform subscription
    - Enterprise class support
    - Quarterly Releases
    - Backported patches for 1 yr
    - Certified Infrastructure

                Docker Community Edition

    - Free Docker edition for developers and operations
    - Monthly "edge" release with latest features for developers
    - Quarterly releases for operations

                Start a Mongo Instance

    $ docker run --name some-mongo -d mongo

    --name
    -d - tells it to run in the background
    mongo - the last image
    mongo:tag

    ... where some-mongo is the name you want to assign to your container
    and tag is the tag specifying the MongoDB version you want

    docker pull mongo
    sudo docker run -d mongo
    sudo docker ps
    sudo docker stop 67c33933139e
    sudo docker run -p 27017:27017 -d mongo     // now this is mapped to the port 27017

                Docker Image

    - An Image defines a Docker Container
        - Similar in concept to a snapshot of a VM
        - Or a class vs an instance of the class
    - Images are immutable
        - Once built, the files making up an image do not change.

                Image Layers

    - Images are built in layers
    - Each layer is an immutable file, but is a collection of files and directories
    - Layers receive an ID, calculated via a SHA 256 hash of the layer contents.
        - Thus, if the layer contents change, the SHA 256 hash changes also.

                Image Ids

    - Image Ids are a SHA 256 hash derived from the layers
        - Thus if the layers of the image changes, the SHA 256 hash changes
    - The image ID listed by docker commands (ie "docker images") is the first 12 characters of the hash

                Image Tag Names

    - The hash values of images are referred to by "tag" names.
    - The format of the full tag name is: [REGISTRYHOST/][USERNAME/]NAME[:TAG]
    - For Registry Host "registry.hub.docker.com" is inferred
    - For ":TAG" - "latest" is default, and inferred
    - Full tag example: registry.hub.docker.com/mongo:latest

FROM ubuntu:xenial

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb

RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		ca-certificates \
		jq \
		numactl \
	; \
	if ! command -v ps > /dev/null; then \
		apt-get install -y --no-install-recommends procps; \
	fi; \
	rm -rf /var/lib/apt/lists/*

******************************** Docker file example ***********************************

FROM ubuntu:xenial

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb

RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		ca-certificates \
		jq \
		numactl \
	; \
	if ! command -v ps > /dev/null; then \
		apt-get install -y --no-install-recommends procps; \
	fi; \
	rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root (https://github.com/tianon/gosu/releases)
ENV GOSU_VERSION 1.12
# grab "js-yaml" for parsing mongod's YAML config files (https://github.com/nodeca/js-yaml/releases)
ENV JSYAML_VERSION 3.13.1

RUN set -ex; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		wget \
	; \
	if ! command -v gpg > /dev/null; then \
		apt-get install -y --no-install-recommends gnupg dirmngr; \
		savedAptMark="$savedAptMark gnupg dirmngr"; \
	elif gpg --version | grep -q '^gpg (GnuPG) 1\.'; then \
# "This package provides support for HKPS keyservers." (GnuPG 1.x only)
		apt-get install -y --no-install-recommends gnupg-curl; \
	fi; \
	rm -rf /var/lib/apt/lists/*; \
	\
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	command -v gpgconf && gpgconf --kill all || :; \
	rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	\
	wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js"; \
# TODO some sort of download verification here
	\
	apt-mark auto '.*' > /dev/null; \
	apt-mark manual $savedAptMark > /dev/null; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
# smoke test
	chmod +x /usr/local/bin/gosu; \
	gosu --version; \
	gosu nobody true

RUN mkdir /docker-entrypoint-initdb.d

ENV GPG_KEYS 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
RUN set -ex; \
	export GNUPGHOME="$(mktemp -d)"; \
	for key in $GPG_KEYS; do \
		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
	done; \
	gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \
	command -v gpgconf && gpgconf --kill all || :; \
	rm -r "$GNUPGHOME"; \
	apt-key list

# Allow build-time overrides (eg. to build image with MongoDB Enterprise version)
# Options for MONGO_PACKAGE: mongodb-org OR mongodb-enterprise
# Options for MONGO_REPO: repo.mongodb.org OR repo.mongodb.com
# Example: docker build --build-arg MONGO_PACKAGE=mongodb-enterprise --build-arg MONGO_REPO=repo.mongodb.com .
ARG MONGO_PACKAGE=mongodb-org
ARG MONGO_REPO=repo.mongodb.org
ENV MONGO_PACKAGE=${MONGO_PACKAGE} MONGO_REPO=${MONGO_REPO}

ENV MONGO_MAJOR 3.6
ENV MONGO_VERSION 3.6.23
# bashbrew-architectures:amd64 arm64v8
RUN echo "deb http://$MONGO_REPO/apt/ubuntu xenial/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"

RUN set -x \
# installing "mongodb-enterprise" pulls in "tzdata" which prompts for input
	&& export DEBIAN_FRONTEND=noninteractive \
	&& apt-get update \
# starting with MongoDB 4.3 (and backported to 4.0 and 4.2 *and* 3.6??), the postinst for server includes an unconditional "systemctl daemon-reload" (and we don't have anything for "systemctl" to talk to leading to dbus errors and failed package installs)
	&& ln -s /bin/true /usr/local/bin/systemctl \
	&& apt-get install -y \
		${MONGO_PACKAGE}=$MONGO_VERSION \
		${MONGO_PACKAGE}-server=$MONGO_VERSION \
		${MONGO_PACKAGE}-shell=$MONGO_VERSION \
		${MONGO_PACKAGE}-mongos=$MONGO_VERSION \
		${MONGO_PACKAGE}-tools=$MONGO_VERSION \
	&& rm -f /usr/local/bin/systemctl \
	&& rm -rf /var/lib/apt/lists/* \
	&& rm -rf /var/lib/mongodb \
	&& mv /etc/mongod.conf /etc/mongod.conf.orig

RUN mkdir -p /data/db /data/configdb \
	&& chown -R mongodb:mongodb /data/db /data/configdb
VOLUME /data/db /data/configdb

COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]

EXPOSE 27017
CMD ["mongod"]

******************************** Docker file example ***********************************

FROM ubuntu:xenial      // We get the particular docker image (we actually inherit from it)
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb    // We add a user

RUN set -eux; \                                             // Each group of commands divided by "/"
	apt-get update; \                                       // is going to create an image layer
	apt-get install -y --no-install-recommends \
		ca-certificates \
		jq \
		numactl \
	; \
	if ! command -v ps > /dev/null; then \
		apt-get install -y --no-install-recommends procps; \
	fi; \
	rm -rf /var/lib/apt/lists/*

***** If we look at Ubuntu docker file, we get it from scratch, from the tar.gz archive

FROM scratch
ADD ubuntu-focal-core-cloudimg-amd64-root.tar.gz /

***** So, the key thing is that docker images can INHERIT from each other

        Mongo        Ubuntu     // image
          |            |
        *****          |        // layer
        *****          |
        ***** <----> *****      // layer (these are shared)
        ***** <----> *****
        ***** <----> *****

        To persist data in the file system:

    1.  Create a data directory on a suitable volume on your host system, e.g. /my/own/datadir.

    2.  Start your mongo container like this:

    $ docker run --name some-mongo -v /my/own/datadir:/data/db -d mongo

    The -v /my/own/datadir:/data/db part of the command mounts the /my/own/datadir directory from the
    underlying host system as /data/db inside the container, where MongoDB by default will write its data files.

    This image also defines a volume for /data/configdb for use with --configsvr

            TO PERSIST DATA IN WINDOWS 10 LOCAL DRIVE:

    1.  start Ubuntu on WSL-2   // don't forget to add the WSL-2 support in Windows and Docker
    2.  cd /mnt/d/code/db/mongo // move to the empty directory where we're going to create a db wired to the container
    3.  sudo docker run -p 27017:27017 -v /pwd/:/data/db -d mongo // run docker command in the current directory
    4.  sudo docker ps  // to see that the container is wired
    5.  run the app and test the persistence in a browser (create an item in the db)
    6.  sudo docker stop <..container hash from ps command result..>
    7.  history | grep mongo    // get all the commands with "mongo" (or whatever db you're wiring)
    8.  56  sudo docker run -p 27017:27017 -v /pwd/:/data/db -d mongo   // find the command with which we created the db
    9.  !56 //  this command repeats the chosen one (#56 in this example)
    10. sudo docker ps  // to see that the container is wired
    11. run the app to check the persistence in a browser (we should see the item we created in step 5)
    ....
    #   PROFIT

    RUN set -x // -x allows you to run multiple commands as one command

    // Pulling the RabbitMQ.
    sudo docker run -d --hostname as-rabbit --name some-rabbit -p 8080:15672 -p 5671:5671 -p 5672:5672 rabbitmq:3-management

    // FINALLY! Connect to MySQL container!:
    // It's impossible to set required permissions for a widows folder even if you set total access to this folder
    // to everyone because MySQL being a guest requires to get more control than all the windows admins
    // but it feels quite comfortable in WSL2 /var/lib/ directory (you should make it using wsl2, of course)
    // because it is installed on Linux natively:
    sudo docker run --name as-mysql -p 3306:3306 -v /var/lib/.../:/var/lib/mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -d mysql

                Docker House Keeping

                Cleaning Up After Docker

    - With Development Use Docker can leave behind a lot of files
    - These files will grow and consume a lot of disk space
    - This is less of an issue on production systems where containers aren't being built and restarted all the time
    - There are 3 key areas of house keeping:
            - Containers
            - Images
            - Volumes

                Cleaning Up Containers

    - Kill all Running Docker Containers
        - docker kill $(docker ps -q)
    - Delete all Stopped Docker Containers
        - docker rm $(docker ps -a -q)

                Cleaning Up Images

    - Remove a Docker Image
        - docker rmi <image name>
    - Delete Untagged (dangling) Images
        - docker rmi $(docker images -q -f dangling=true)
    - Delete All Images
        - docker rmi $(docker images -q)

                Cleaning Up Volumes

    - Once a volume is no longer associated with a container, it is considered "dangling"
    - Remove all dangling volumes
        - docker volume rm $(docker volume ls -f dangling=true -q)
    - NOTE: Does not remove files from host system in shared volumes

    List all Docker Images
        docker images -a

    List All Running Docker Containers
        docker ps

    List All Docker Containers
        docker ps -a

    Start a Docker Container
        docker start <container name>

    Stop a Docker Container
        docker stop <container name>

    Kill All Running Containers
        docker kill $(docker ps -q)

    View the logs of a Running Docker Container
        docker logs <container name>

    Delete All Stopped Docker Containers
    Use -f option to nuke the running containers too.
        docker rm $(docker ps -a -q)

    Remove a Docker Image
        docker rmi <image name>

    Delete All Docker Images
        docker rmi $(docker images -q)

    Delete All Untagged (dangling) Docker Images
        docker rmi $(docker images -q -f dangling=true)

    Delete All Images
        docker rmi $(docker images -q)

    Remove Dangling Volumes
        docker volume rm -f $(docker volume ls -f dangling=true -q)

    SSH Into a Running Docker Container
    Okay not technically SSH, but this will give you a bash shell in the container.
        sudo docker exec -it <container name> bash

    Use Docker Compose to Build Containers
    Run from directory of your docker-compose.yml file.
        docker-compose build

    Use Docker Compose to Start a Group of Containers
    Use this command from directory of your docker-compose.yml file.
        docker-compose up -d

    This will tell Docker to fetch the latest version of the container from the repo, and not use the local cache.
        docker-compose up -d – force-recreate

    This can be problematic if you’re doing CI builds with Jenkins and pushing Docker images to another host, or using for CI testing. I was deploying a Spring Boot Web Application from Jekins, and found the docker container was not getting refreshed with the latest Spring Boot artifact.

    1.  #stop docker containers, and rebuild
    2.  docker-compose stop -t 1
    3.  docker-compose rm -f
    4.  docker-compose pull
    5.  docker-compose build
    6.  docker-compose up -d

    Follow the Logs of Running Docker Containers With Docker Compose
        docker-compose logs -f

    Save a Running Docker Container as an Image
        docker commit <image name> <name for image>

    Follow the logs of one container running under Docker Compose
        docker-compose logs pump <name>

            Dockerfile Hints for Spring Boot Developers

    Add Oracle Java to an Image
    For CentOS/ RHEL

    1.  ENV JAVA_VERSION 8u31
    2.  ENV BUILD_VERSION b13
    3.
    4.  # Upgrading system
    5.  RUN yum -y upgrade
    6.  RUN yum -y install wget
    7.
    8.  # Downloading & Config Java 8
    9.  RUN wget – no-cookies – no-check-certificate – header "Cookie: oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-$BUILD_VERSION/jdk-$JAVA_VERSION-linux-x64.rpm" -O /tmp/jdk-8-linux-x64.rpm
    10. RUN yum -y install /tmp/jdk-8-linux-x64.rpm
    11. RUN alternatives – install /usr/bin/java jar /usr/java/latest/bin/java 200000
    12. RUN alternatives – install /usr/bin/javaws javaws /usr/java/latest/bin/javaws 200000
    13. RUN alternatives – install /usr/bin/javac javac /usr/java/latest/bin/javac 200000

    Add / Run a Spring Boot Executable Jar to a Docker Image

    1.  VOLUME /tmp
    2.  ADD /maven/myapp-0.0.1-SNAPSHOT.jar myapp.jar
    3.  RUN sh -c 'touch /myapp.jar'
    4.  ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/myapp.jar"]

    *************************************************************

    docker run -d centos tail -f /dev/null  // use tail -f /dev/null to prevent a docker container from stopping

    docker exec -it silly_hopper bash   // coming inside an image ("silly_hopper" is a generated container name)

    [root@777f668646be /]# ps -ef   // look at the processes are running in the container

    [root@777f668646be /]# yum install java     // installing java on the container

    [root@777f668646be /]# java -version    // checking the java version
    openjdk version "1.8.0_282"
    OpenJDK Runtime Environment (build 1.8.0_282-b08)
    OpenJDK 64-Bit Server VM (build 25.282-b08, mixed mode)

    git clone https://github.com/springframeworkguru/springbootwebapp.git  // clone a simple web app to test

    // Update to java 11
    [root@777f668646be /]# rpm -qa | grep java
    [root@777f668646be /]# rpm -qa | grep jdk
    [root@777f668646be /]# yum remove java-1.8.0-openjdk
    [root@777f668646be /]# dnf install java-11-openjdk

    [root@777f668646be /]# java -version
    openjdk version "11.0.9.1" 2020-11-04 LTS
    OpenJDK Runtime Environment 18.9 (build 11.0.9.1+1-LTS)
    OpenJDK 64-Bit Server VM 18.9 (build 11.0.9.1+1-LTS, mixed mode, sharing)

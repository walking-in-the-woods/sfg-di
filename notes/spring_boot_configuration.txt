
                Dependency Management

    - Maven or Gradle are supported for curated dependencies
    - Each version of Spring Boot is configured to work with a specific version of Spring Framework
    - Overriding the Spring Framework Version is not recommended
    - Other build systems such as Ant can be used, but not recommended

                Maven Support

    - Maven projects inherit from a Spring Boot Parent POM
        - When possible, do not specify versions in your POM. Allow the versions to inherit from the parent
    - The Spring Boot Maven Plugin allows for packaging the executable jar

                Gradle Support

    - Gradle support depends on a Spring Boot Gradle plugin
    - Requires Gradle 3.4 or later
    - The Gradle plugin provides support of curated dependencies, packaging as jar or war, and allows you
      ot run the application from the command line

                Ant + Ivy Support

    - Spring Boot can be built using Ant with Ivy
    - Ivy is used for dependency management
    - Complete directions are available via the official Spring Boot documentation

                Spring Boot Starters

    - Starters are top level dependencies for popular Java Libraries
    - Will bring in dependencies for the project and related Spring components
        - Starter 'spring-boot-starter-data-jpa' brings in:
            - Hibernate
            - Spring Data JPA - and related Spring deps

                Spring Boot Annotations

    - @SpringBootApplication - main annotation to use
    - Includes:
        - @Configuration - Declares class as Spring Configuration
        - @EnableAutoConfiguration - Enables auto configuration
        - @ComponentScan - Scans for components in current package and all child packages

                Disabling Specific Auto Config

    - Auto-configuration will bring in A LOT of configuration classes in supplied Spring Boot Jars
    - You can specify classes to exclude with:
        - @EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
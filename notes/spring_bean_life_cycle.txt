
                    Spring Bean Life Cycle

    Instantiate ->
    -> Populate Properties ->
    -> Call setBeanName of BeanNameAware ->
    -> Call setBeanFactory of BeanFactoryAware ->
    -> Call setApplicationContext of ApplicationContextAware ->
    -> Preinitialization (Bean PostProcessors) ->
    -> afterPropertiesSet of Initializing Beans ->
    -> Custom Init Method ->
    -> Post Initialization (BeanPostProcessors) ->
    -> Bean Ready to Use

    Container Shutdown ->
    -> Disposable Bean's destroy() ->
    -> Call Custom Destroy Method ->
    -> Terminated

    1. Call a constructor
    2. Set properties to it
    3. There are couple interfaces that you can implement:
        - Aware interfaces (these are gonna called early in the being lifecycle)
          BeanNameAware, BeanFactoryAware, ApplicationContextAware (aware - knowing, competent, informed)
          They gonna get called in that order.
    4. The Bean gets wired up and then we have the pre-initialization and we have Bean PostProcessors.
    5. Then the Bean goes through initializing and there's an interface that we can do for initializing
    6. Then we can also specify a custom initialization
    7. And finally we get post-initialization with the BeanPostProcessors.
       And at that point that Bean is considered ready to use by the framework.
       And then the framework moves on continues creating the Beans and gets everything wired up,
       and then can run for an indefinite amount of time, and then ultimately we're going to have some type of
       termination about ideally, unless we just pull a plug on the server.

    1. So we should get a container shutdown signal.
    2. And at this point you have an interface you can implement called Disposable Bean the destroy() method
       will get called, or you can specify a custom destroy method.
    3. At that point the Bean is destroyed or terminated.

                    Callback Interfaces

    Spring has two interfaces you can implement for call back events:
    1. InitializingBean.afterPropertiesSet()
        (called after properties are set)
    2. DisposableBean.destroy()
        (called during bean destruction in shutdown)

                    Life Cycle Annotations

    Spring has two annotations you can use to hook into the bean life cycle:
    1. @PostConstruct annotated methods will be called after the bean has been constructed,
       but before its returned to the requesting object
    2. @PreDestroy is called just before the bean is destroyed by the container

                    Bean Post Processors

    Gives you a means to tap into the Spring context life cycle and interact with beans as they are processed
    Implement interface BeanPostProcessor:
        - postProcessBeforeInitialization - Called before bean initialization method
        - postProcessAfterInitialization - Called after bean initialization
    There is actually hard to find an example of usage these.

                    "Aware" Interfaces

    - Spring has over 14 "Aware" interfaces
    - These are used to access the Spring Framework infrastructure
    - These are largely used within the framework
    - Rarely used by Spring developers

        Aware Interface                         Description

    - ApplicationContextAware             Interface to be implemented by any object that wishes to be notified
                                          of the ApplicationContext that it runs in.

                                          (This is the more common one that you're going to use. And this gives
                                          you a way to get a handle of the application context)

    - ApplicationEventPublisherAware      Set the ApplicationEventPublisher that this object runs in

                                          (This is one that you will use if you're going to be throwing
                                          application events, so you can define custom events inside the Spring.
                                          Then you can happen and set up event listeners, so that's a really
                                          handy one.)

    - BeanClassLoaderAware                Callback that supplies the bean class loader to a bean instance

    - BeanFactoryAware                    Callback that supplies the owning factory to a bean instance

                                          (This is a way to get a handle on the Spring BeanFactory. If you have
                                          a need to get a handle on a Bean within some type of process.
                                          That's also a very handy one.)

    - BeanNameAware                       Set the name of the bean in the bean factory that creates this bean

    - BootstrapContextAware               Set the BootstrapContext that this object runs in

    - LoadTimeWeaverAware                 Set the LoadTimeWeaver of this object's containing ApplicationContext

    - MessageSourceAware                  Set the MessageSource that this object runs in

    - NotificationPublisherAware          Set the NotificationPublisher instance for the current managed resource
                                          instance

    - PortletConfigAware                  Set the PortletConfig this object runs in

    - PortletContextAware                 Set the PortletContext that this object runs in

    - ResourceLoaderAware                 Set the ResourceLoader that this object runs in

    - ServletConfigAware                  Set the ServletConfig that this object runs in

    - ServletContextAware                 Set the ServletContext that this object runs in

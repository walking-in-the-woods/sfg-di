
                    "Reactive"

    - Reactive Systems - Architecture and Design Pattern
        (ie Cloud Native, Cloud Based Applications)
    - Reactive Programming
        (generally Event Based)
        Reactive Programming is very granular It's focusing on event based. It's asynchronous non-blocking
        programming techniques focused on handling an event, and that event would probably be within a reactive system.
        A reactive system is a much more broader concept. We're looking at how you're laying out your servers
        end your microservices, whether or not you're using messaging or a big monolithic application,
        so it's more at an architectural level while reactive programming is the technique that you're using to code in.
    - Functional Reactive Programming (FRP)
        (often confused with Reactive Programming)

                    Reactive Manifesto

                  |--->  Responsive  <---|
                  |           ^          |
              Elastic    <----|---->   Resilient
                  ^           |          ^
                  |--- Message Driven ---|

                    Reactive Manifesto - Responsive

    - The system responds in a timely manner.
    - Responsiveness is the cornerstone of usability and utility.
    - Responsiveness also means problems may be detected quickly and dealt with effectively.
    - Responsive systems provide rapid and consistent response times.
    - Consistent behavior simplifies error handling, builds and user confidence, and encourages further interaction.

                    Reactive Manifesto - Resilient

    - System stays responsive in the face of failure.
    - Resilience is achieved by replication, containment, isolation, and delegation.
    - Failures are contained within each component.
    - Parts of the system can fail, without compromising the system as a whole.
    - Recovery of each component is delegated to another.
    - High-availability is ensured by replication where necessary.

                    Reactive Manifesto - Elastic

    - The system stays responsive under varying workload.
    - Reactive Systems can react to changes in the input rate by increasing or decreasing resources allocated to
        service inputs.
    - Reactive Systems achieve elasticity in a cost effective way on commodity hardware and software platforms.

                    Reactive Manifesto - Message Driven

    - Reactive Systems rely on asynchronous message passing to establish a boundary between components.
        This ensures loose coupling, isolation, and location transparency.
    - Message passing enables load management, elasticity, and flow control.
    - Location transparent messaging makes management of failures possible.
    - Non-blocking communication allows recipients to only consume resources while active,
        leading to less system overhead.

                    Reactive Programming with Reactive Systems

    - Reactive Programming is a useful implementation technique.
    - Reactive Programming focuses on non-blocking, asynchronous execution - a key characteristic of Reactive Systems.
    - Reactive Programming is just one tool in building Reactive Systems.

                    What is Reactive Programming?

    - Reactive Programming is an asynchronous programming paradigm focused on streams of data.


                    Common Use Cases

    - External Service Calls
    - Highly Concurrent Message Consumers
    - Spreadsheets
    - Abstraction Over Asynchronous Processing
        Abstract whether or not your program is synchronous or asynchronous

                    Features of Reactive Programming

    - Data Streams
    - Asynchronous
    - Non-blocking
    - Backpressure
    - Failures as Messages

                    Data Streams

    - Data Streams can be just about anything.
    - Mouse clicks, or other user interactions.
    - JMS Messages, RESTful Service calls, Twitter feed, Stock Trades, list of data from a database.
    - A Stream is a sequence of events ordered in time.
    - Events you want to listen to.

                    Asynchronous

    - Events are captured asynchronously.
    - A function is defined to execute when an event is emitted.
    - Another function is defined if an error is emitted.
    - Another function is defined when complete is emitted.

                    Non-Blocking

    - The concept of using non-blocking is important.
    - In Blocking, the code will stop and wait for more data (ie reading from disk, network, etc)
    - Non-blocking in contrast, will process available data, ask to be notified when more is available, then continue.

        Multi Threaded Server

                    Thread Pool
    Request ---> | ->             |
    Request ---> | ->             |---->    Blocking IO
    Request ---> | (...) ->       |
    Request ---> | (...) (...) -> |

    (...) - Thread Waiting
    -> - Thread Processing

        Node.js Server

                    Event Loop    POSIX Async Threads
    Request ---> |   |-- <-|          |         | |
    Request ---> |-->|     | delegate | --> --> | | ----> Non-blocking IO
    Request ---> |   |     | <------> | --> --> | |
    Request ---> |   |-> --|          |         | |
                  Single Thread

                  Web Request       (X) - blocking

        Request on Port      Parse JSON       Call Database      Database Process
               |                  |                  |                  |
              (X) -- Request --> (X) -- Request --> (X) -- Request -->  |
               |                  |                  |                 (X)
              (X) <-- Return --- (X) <-- Return --- (X) <-- Return ---- |
               |                  |                  |                  |

                    Back Pressure

    - The ability of the subscriber to throttle data (give me 10 or 100 or 1000 records..)

                    Failures as Messages

    - Exceptions are not thrown in a traditional sense.
        (Would break processing of stream)
    - Exceptions are processed by a handler function.

                    Key Take Aways

    - Reactive Programming focused on processing streams of data.
    - Traditional CRUD applications are still alive and well.

                    Reactive Streams and Spring Framework 5

                    Reactive Streams API

    - Goal is to create a standard for asynchronous stream processing with non-blocking back pressure.
    - Reactive Streams is a set of 4 interfaces which define the API.
    - Adoptions: Akka Streams, MongoDB, Ratpack, Reactive Rabbit, Project Reactor (Spring 5), RxJava,
        Slick 3.0, Vert.x 3.0, Cassandra, ElasticSearch, Kafka, Play
    - Under JEP-266, Reactive Streams is now part of the Java 9 JDK.

    Interfaces:
        1.  Publisher (provides unbounded number of elements, os, that's our data stream.
        2.  Subscriber (this ia going to consume from a publisher)
        3.  Subscription
        4.  Processor

                    Spring MVC & Spring WebFlux

    Spring Servlet Container and Servlet API is not reactive, it's blocking. So, Spring Framework guys created
    a whole new stack, a whole new web framework with inside of Spring called Spring WebFlux.

        @Controller / @RequestMapping                Router Functions
        (   Spring WebMVC       )           (   Spring WebFlux                  )
        (   Servlet API         )           (   HTTP / Reactive Streams         )
        (   Servlet Container   )           (   Tomcat, Jetty, Netty, Undertow  )

                    Spring Reactive Types

    - Two new reactive types are introduced with Spring Framework 5.
    - "Mono" is a publisher with zero or one elements in data stream.
    - "Flux" is a publisher with zero or MANY elements in the data stream.
    - Both types implement the Reactive Streams Publisher interface.